import os
import cv2
import random
from glob import glob
from tqdm import tqdm
import albumentations as A
import matplotlib.pyplot as plt

# === CONFIG ===
INPUT_DIR = "data/raw"              # folder with original images + YOLO .txt files
OUTPUT_DIR = "augmented_dataset"       # folder to save augmented images + labels
AUG_PER_IMAGE = 3                      # how many augmentations per image
VISUALIZE_SAMPLES = 5                 # number of samples to preview

# === Create output folder ===
os.makedirs(OUTPUT_DIR, exist_ok=True)

# === Define augmentation pipeline ===
transform = A.Compose([
    A.HorizontalFlip(p=0.5),
    A.RandomBrightnessContrast(p=0.5),
    A.Rotate(limit=15, p=0.5),
    A.RandomScale(scale_limit=0.2, p=0.3),
],
    bbox_params=A.BboxParams(format='yolo', label_fields=['class_labels'])
)

# === Helper to load YOLO labels ===
def load_yolo_labels(txt_path):
    bboxes = []
    class_labels = []
    with open(txt_path, "r") as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) == 5:
                cls, x, y, w, h = parts
                try:
                    # Ensure class is an integer
                    cls = int(float(cls))  # Convert to float first, then to int
                    bboxes.append([float(x), float(y), float(w), float(h)])
                    class_labels.append(cls)
                except ValueError:
                    print(f"Skipping invalid class label in {txt_path}: {cls}")
    return bboxes, class_labels


# === Helper to save YOLO labels ===
def save_yolo_labels(txt_path, bboxes, class_labels):
    with open(txt_path, "w") as f:
        for bbox, cls in zip(bboxes, class_labels):
            line = f"{cls} " + " ".join(f"{x:.6f}" for x in bbox)
            f.write(line + "\n")

# === Main Loop ===
image_paths = glob(os.path.join(INPUT_DIR, "*.jpg"))
preview_paths = []

print("Augmenting dataset...")
import os
import cv2
import random
from glob import glob
from tqdm import tqdm
import albumentations as A
import matplotlib.pyplot as plt

# === CONFIG ===
INPUT_DIR = "data/raw"              # folder with original images + YOLO .txt files
OUTPUT_DIR = "augmented_dataset"       # folder to save augmented images + labels
AUG_PER_IMAGE = 3                      # how many augmentations per image
VISUALIZE_SAMPLES = 5                 # number of samples to preview

# === Create output folder ===
os.makedirs(OUTPUT_DIR, exist_ok=True)

# === Define augmentation pipeline ===
transform = A.Compose([
    A.HorizontalFlip(p=0.5),
    A.RandomBrightnessContrast(p=0.5),
    A.Rotate(limit=15, p=0.5),
    A.RandomScale(scale_limit=0.2, p=0.3),
],
    bbox_params=A.BboxParams(format='yolo', label_fields=['class_labels'])
)

# === Helper to load YOLO labels ===
def load_yolo_labels(txt_path):
    bboxes = []
    class_labels = []
    with open(txt_path, "r") as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) == 5:
                cls, x, y, w, h = parts
                try:
                    # Ensure class is an integer
                    cls = int(float(cls))  # Convert to float first, then to int
                    bboxes.append([float(x), float(y), float(w), float(h)])
                    class_labels.append(cls)
                except ValueError:
                    print(f"Skipping invalid class label in {txt_path}: {cls}")
    return bboxes, class_labels


# === Helper to save YOLO labels ===
def save_yolo_labels(txt_path, bboxes, class_labels):
    with open(txt_path, "w") as f:
        for bbox, cls in zip(bboxes, class_labels):
            line = f"{cls} " + " ".join(f"{x:.6f}" for x in bbox)
            f.write(line + "\n")

# === Main Loop ===
image_paths = glob(os.path.join(INPUT_DIR, "*.jpg"))
preview_paths = []

print("Augmenting dataset...")
for img_path in tqdm(image_paths):
    basename = os.path.splitext(os.path.basename(img_path))[0]
    label_path = os.path.join(INPUT_DIR, f"{basename}.txt")

    if not os.path.exists(label_path):
        continue

    image = cv2.imread(img_path)
    height, width = image.shape[:2]
    bboxes, class_labels = load_yolo_labels(label_path)

    for i in range(AUG_PER_IMAGE):  # âœ… Move this line here
        try:
            augmented = transform(image=image, bboxes=bboxes, class_labels=class_labels)
            aug_img = augmented["image"]
            aug_bboxes = augmented["bboxes"]
            aug_labels = augmented["class_labels"]

            valid_bboxes = []
            valid_labels = []
            for bbox, label in zip(aug_bboxes, aug_labels):
                x_center, y_center, width, height = bbox
                if 0 <= x_center <= 1 and 0 <= y_center <= 1 and 0 <= width <= 1 and 0 <= height <= 1:
                    valid_bboxes.append([x_center, y_center, width, height])
                    valid_labels.append(label)

            if valid_bboxes:
                out_img_name = f"{basename}_aug{i}.jpg"
                out_txt_name = f"{basename}_aug{i}.txt"
                out_img_path = os.path.join(OUTPUT_DIR, out_img_name)
                out_txt_path = os.path.join(OUTPUT_DIR, out_txt_name)

                cv2.imwrite(out_img_path, aug_img)
                save_yolo_labels(out_txt_path, valid_bboxes, valid_labels)

                if len(preview_paths) < VISUALIZE_SAMPLES:
                    preview_paths.append((out_img_path, out_txt_path))
            else:
                print(f"Skipping augmentation {i} for {img_path} due to invalid bounding boxes.")

        except Exception as e:
            print(f"Error processing {img_path}: {e}")

    basename = os.path.splitext(os.path.basename(img_path))[0]
    label_path = os.path.join(INPUT_DIR, f"{basename}.txt")

    if not os.path.exists(label_path):
        continue

    image = cv2.imread(img_path)
    height, width = image.shape[:2]
    bboxes, class_labels = load_yolo_labels(label_path)

    for i in range(AUG_PER_IMAGE):
        try:
        # Apply augmentation
            augmented = transform(image=image, bboxes=bboxes, class_labels=class_labels)
            aug_img = augmented["image"]
            aug_bboxes = augmented["bboxes"]
            aug_labels = augmented["class_labels"]

            # Filter out invalid bounding boxes (ensure they stay within [0, 1] range)
            valid_bboxes = []
            valid_labels = []
            for bbox, label in zip(aug_bboxes, aug_labels):
                x_center, y_center, width, height = bbox
                # Check if the bbox is within valid bounds
                if 0 <= x_center <= 1 and 0 <= y_center <= 1 and 0 <= width <= 1 and 0 <= height <= 1:
                    valid_bboxes.append([x_center, y_center, width, height])
                    valid_labels.append(label)

            # If valid bounding boxes exist, save the augmented image and labels
            if valid_bboxes:
                out_img_name = f"{basename}_aug{i}.jpg"
                out_txt_name = f"{basename}_aug{i}.txt"
                out_img_path = os.path.join(OUTPUT_DIR, out_img_name)
                out_txt_path = os.path.join(OUTPUT_DIR, out_txt_name)

                # Save image and labels
                cv2.imwrite(out_img_path, aug_img)
                save_yolo_labels(out_txt_path, valid_bboxes, valid_labels)

                # Add for previewing (optional)
                if len(preview_paths) < VISUALIZE_SAMPLES:
                    preview_paths.append((out_img_path, out_txt_path))
            else:
                print(f"Skipping augmentation {i} for {img_path} due to invalid bounding boxes.")
                
        except Exception as e:
            print(f"Error processing {img_path}: {e}")

# === Visualize Random Samples ===
def draw_boxes(image, bboxes, labels):
    h, w = image.shape[:2]
    for bbox, label in zip(bboxes, labels):
        x_center, y_center, bw, bh = bbox
        x1 = int((x_center - bw / 2) * w)
        y1 = int((y_center - bh / 2) * h)
        x2 = int((x_center + bw / 2) * w)
        y2 = int((y_center + bh / 2) * h)
        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(image, str(label), (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 1)
    return image

print(f"\nDisplaying {VISUALIZE_SAMPLES} random augmented samples:")
for img_path, txt_path in preview_paths:
    img = cv2.imread(img_path)
    bboxes, class_labels = load_yolo_labels(txt_path)
    img = draw_boxes(img, bboxes, class_labels)
    plt.figure(figsize=(8, 6))
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title(os.path.basename(img_path))
    plt.axis("off")
    plt.show()


# === Visualize Random Samples ===
def draw_boxes(image, bboxes, labels):
    h, w = image.shape[:2]
    for bbox, label in zip(bboxes, labels):
        x_center, y_center, bw, bh = bbox
        x1 = int((x_center - bw / 2) * w)
        y1 = int((y_center - bh / 2) * h)
        x2 = int((x_center + bw / 2) * w)
        y2 = int((y_center + bh / 2) * h)
        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(image, str(label), (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 1)
    return image

print(f"\nDisplaying {VISUALIZE_SAMPLES} random augmented samples:")
for img_path, txt_path in preview_paths:
    img = cv2.imread(img_path)
    bboxes, class_labels = load_yolo_labels(txt_path)
    img = draw_boxes(img, bboxes, class_labels)
    plt.figure(figsize=(8, 6))
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title(os.path.basename(img_path))
    plt.axis("off")
    plt.show()
